on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: development
    env:
      PRIMARY_HOST: ${{ secrets.PRIMARY_HOST }}
      FALLBACK_HOST: ${{ secrets.FALLBACK_HOST }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}

    steps:
    - name: Check DNS Connection
      id: pick_host
      shell: bash
      run: |
        echo "Trying primary host $PRIMARY_HOST:$SERVER_PORT"
        if nc -z -w5 "$PRIMARY_HOST" "$SERVER_PORT"; then
          echo "Using primary host"
          echo "HOST=$PRIMARY_HOST" >> "$GITHUB_OUTPUT"
        else
          echo "Primary unreachable, trying fallback: $FALLBACK_HOST:$SERVER_PORT"
          if nc -z -w5 "$FALLBACK_HOST" "$SERVER_PORT"; then
            echo "Using fallback host"
            echo "HOST=$FALLBACK_HOST" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: neither host is reachable" >&2
            exit 1
          fi
        fi

    - name: Check SSH Connection
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.pick_host.outputs.HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
        port: ${{ env.SERVER_PORT }}
        timeout: 60s
        script: whoami

    - name: Deploy on Server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.pick_host.outputs.HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
        port:  ${{ env.SERVER_PORT }}
        timeout: 60s
        script: |
          cd ~/projects/webapp/Hello_Django

          echo "DJANGO_DEBUG=${{ vars.DJANGO_DEBUG }}" > .env
          echo "ACCESS_TOKEN_LIFETIME=${{ vars.ACCESS_TOKEN_LIFETIME }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env

          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB_NAME }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_DB_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_DB_PASSWORD }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_DB_HOST }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_DB_PORT }}" >> .env

          git pull origin main
          docker-compose down || true
          docker system prune -f
          docker-compose build --no-cache
          docker-compose up --build -d